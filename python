#!/bin/bash

export PYTHONSTARTUP=~/.pystartup

function apip() {
  if [[ -z $1 ]]; then
    echo "USAGE: apip term"
    return
  fi
  a "$@" $VIRTUAL_ENV/lib/python*/site-packages
}

# lazy-load virtualenv functions

pyenv() {
  unfunction pyenv
  if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init -)"
    pyenv $@
  fi
}

act() {
  [[ -d venv ]] && . venv/bin/activate
}

pyenv-virtualenv() {
  export PYENV_ROOT=$(pyenv root)
  unfunction pyenv-virtualenv

  eval "$(pyenv virtualenv-init -)"
  command pyenv-virtualenv $@
}

function virtualenv {
  unfunction virtualenv
  export VIRTUALENVWRAPPER_PYTHON=$(which python3)
  >/dev/null which virtualenvwrapper.sh && source $(which virtualenvwrapper.sh)
  virtualenv "$@"
}

function mkvirtualenv() {
  unfunction mkvirtualenv
  source $(which virtualenvwrapper.sh)
  mkvirtualenv "$@"
}

function workon() {
  unfunction workon
  export WORKON_HOME=$HOME/.virtualenvs
  export PROJECT_HOME=$HOME/.virtualenvs/devel
  source $(which virtualenvwrapper.sh)
  workon "$@"
}

pip_dependencies() {
  if [[ ! -f setup.py ]]; then
    >&2 echo "Run this in a directory with setup.py in it"
    return 1
  fi
  if [ "0" == "$(wc -l < setup.py)" ]; then
    >&2 echo "Your setup.py is empty (are you piping this command into it?)"
    return 1
  fi

  local start_line=$(grep 'install_requires=\[' setup.py -n | cut -d : -f 1)

  if [ "" == "${start_line}" ]; then
    >&2 echo "setup.py appears corrupted (no 'install_requires' line found)"
    return 1
  fi

  local header=$(head -n ${start_line} setup.py)
  local body=$(pip freeze | grep -v '-e git' | gsed 's/\(.\+\)/        "\1",/g')
  local footer="    ],)"

  if [[ "$1" == "--update" ]] || [[ "$1" == "-U" ]]; then
    echo $header  > setup.py
    echo $body   >> setup.py
    echo $footer >> setup.py
  else
    echo $header
    echo $body
    echo $footer
  fi
}
