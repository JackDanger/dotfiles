#!/bin/bash

# This program takes as its arguments a program to run repeatedly. It runs one
# time and then when `re-run` is invoked again (from any process on the machine)
# it re-executes the original commands again in the original process.

function main() {
  local cmd="$@"
  local FIFO=/tmp/re-run.wait

  function usage {
    echo "Usage: $(basename $0) [cmd]"
    echo ""
    echo "Once this utility has been invoked with a cmd then that cmd"
    echo "will be executed. It will be re-executed every time this utility"
    echo "is invoked without any arguments."
    exit 1
  }

  # If the pipe exists
  if [ -p $FIFO ]; then
    # and no arguments are passed
    if [ -z "$cmd" ]; then
      # then send a newline character to the pipe
      echo '' > $FIFO
      # and propagate any return status
      exit $?
    fi

    # Check if an instance of this program is already running
    pid=$(ps aux | grep "cat $FIFO" | grep -v grep | awk '{print $2}')
    if [[ -n $pid ]]; then
      # if so then print the usage
      usage
      exit 1
    else
      # otherwise cleanup the socket and retry
      rm -f $FIFO
      $0 $cmd
    fi
  fi

  # If the pipe does NOT exist then create it
  rm -f $FIFO && mkfifo $FIFO

  # Ensure the pipe is cleaned up later
  trap "rm -f $FIFO" EXIT

  # Prime the socket with a line ready to be read so the $cmd runs once right
  # at the start.
  echo '' > $FIFO &

  # And block while reading from it, running $cmd each time we receive a line.
  while cat < $FIFO; do
    $cmd
  done
}

main "$@"
