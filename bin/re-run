#!/bin/bash

# This program takes as its arguments a program to run repeatedly. It runs one
# time and then when `re-run` is invoked again (from any process on the machine)
# it re-executes the original commands again in the original process.

function main() {
  local cmd="$@"
  local FIFO=/tmp/re-run.wait

  function usage {
    echo "Usage: $(basename $0) [cmd]"
    echo ""
    echo "Once this utility has been invoked with a cmd then that cmd"
    echo "will be executed. It will be re-executed every time this utility"
    echo "is invoked without any arguments."
  }

  function running {
    ps ux | grep "/bin/bash $0" | grep -v grep | grep -v "$$" >/dev/null
  }

  # If the pipe exists
  if [ -p $FIFO ]; then
    # and the server process is running
    if running; then
      # and no arguments are passed
      if [ -z "$cmd" ]; then
        # and the pipe is a socket
        if [ -p $FIFO ]; then
          # then send a newline character to the pipe
          echo 'pong' > $FIFO
          # and bail
          exit 0
        else
          # fix the socket and retru
          rm -f $FIFO
          exec $0 $cmd
        fi
      else
        # otherwise explain usage of the no-args form
        echo "$0 is already running on your system."
        usage
        exit 1
      fi
    # The server process is not running
    else
      # and arguments are passed
      if [ -n "$cmd" ]; then
        # cleanup the socket and retry
        rm -f $FIFO
        exec $0 $cmd
      fi
    fi
  # The pipe does not exist
  else
    # if no arguments are passed
    if [ -z "$cmd" ]; then
      # print the usage
      usage
      exit 1
    fi
  fi

  # Create a named pipe owned by the current user
  rm -f $FIFO && mkfifo $FIFO

  # Ensure the pipe is cleaned up later
  trap "rm -f $FIFO" EXIT QUIT

  # Run $cmd once right at the start.
  $cmd

  # Listen for any lines sent through the socket and run $cmd once each time
  while read -r _  < $FIFO ; do
    echo "$ $cmd"
    $cmd
  done
}

main "$@"
