#!/bin/bash
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias l='ls -lAG'
alias e=nvim
alias a='ag --ignore log --ignore tags'
alias ap='ag --ignore log --ignore tags --pager="less -FRX"'

function QQ() { exit; }

if [[ -z "$(which fzf)" ]]; then
  alias v=nvim
else
  function smartvim() {
    if [[ -z "$1" ]]; then
      ${VISUAL:-vim} $(fzf)
    else
      ${VISUAL:-vim} $*
    fi
  }
  alias v=smartvim
fi

alias grab='cat | pbcopy'
alias trail='tail -n 300 -F'
alias ack='ack --smart-case'

alias apti='sudo apt install -y'

alias httpdump="sudo tcpdump -i en0 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""
alias warmup='seq 1 $(sysctl -n hw.ncpu) | xargs -n 1 -P $(sysctl -n hw.ncpu) yes > /dev/null'
alias top='top -o cpu'

alias tmuxify='tmux attach || tmux'

# Terraform
alias plan="terraform plan -out=.terraform/plan"
alias apply="terraform apply .terraform/plan"
function plan_via() {
  set -x
  aws-vault exec "$@" -- terraform plan -out=.terraform/plan
}
function apply_via() {
  set -x
  aws-vault exec "$@" -- terraform apply .terraform/plan
}

function umount() {
  if which diskutil &>/dev/null
  then
    sudo diskutil unmount $@
  else
    sudo unmount $@
  fi
}

alias timestamp="date +%Y-%m-%d-%H-%M-%S"
alias timestampdb="date +%Y%m%d%H%M%S"
alias datestamp="date +%Y-%m-%d"
alias jsonpretty='python -mjson.tool'
alias clj='rlwrap clj'
alias ccat='which pygmentize 2>/dev/null && pygmentize -g || python3 -m pygments -g'
function cless() { ccat $1 | less -r; }
alias shuffle="perl -MList::Util=shuffle -e 'print shuffle(<STDIN>);'"

alias awslogin='aws-vault login'
alias awsshell='aws-vault exec'

[[ -f ~/.aliases.local ]] && . ~/.aliases.local

function name {
  dir=$2;
  [[ -n $dir ]] || dir=.
  find $dir -name "*$1*"
}

pingme (){
  $@
  local retval=$?
  local display=$retval
  [[ display -eq 0 ]] && display=success
  osascript -e "display notification with title \"$* ($display)\" sound name \"Glass\""
  return $retval
}

function dotfiles {
  cd ~/.dotfiles
  git add .
  git commit -m "$*"
  git pull --rebase
  git push
  cd -
}
if which gsed &>/dev/null; then
  true # great
else
  gsed() {
    sed $*
  }
fi
function camelcase {
  if [[ -z $1 ]]; then
    gsed 's/\(^[a-z]\)\|_\([a-z]\)/\U\1\U\2/g'
  else
    echo $* | camelcase
  fi
}
function c {
  if [[ -n "$1" ]]; then
    if [[ -n $TMUX ]]; then
      tmux rename-window "$(basename $1 | camelcase)"
    fi
    cd $1
  else
    code=${CODE_HOME:-~/www}
    dir=$(find $code -depth -3 -type d | fzf)
    [[ -n "${dir}" ]] && c $dir
  fi
}

function tac {
  local line
  if IFS= read -r line
  then
    tac
    printf '%s\n' "$line"
  fi
}

function reset-ssh() {
  local operator='d'
  cmd=$(history | egrep '^\s*\d+\s+ssh' | tail -n 1 | awk '{for (i=2; i<NF; i++) printf $i " "; print $NF}')

  echo "Last command: \"$cmd\""
  out=$(eval ${cmd} 2>&1)
  line=$(egrep -o 'known_hosts:\d+' <<<$out | cut -c 13-)

  echo "removing ~/.ssh/known_hosts:$line"
  sed -i.bak -e "$line$operator" ~/.ssh/known_hosts

  echo "Repeating: $cmd"
  eval $cmd
}

