#!/bin/bash
alias gs='git status'
alias gu='git pull --no-tags --recurse-submodules'
alias gur='git pull --rebase --no-tags --recurse-submodules'
alias gl='git log'
alias glp='git log -p -w'
alias glpf='git log -p --follow'
alias log="git log --follow --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"
alias gp='git push'
alias gpf='git push --force-with-lease'
alias gd='git diff'
alias gdc='git diff --cached'
alias ga='git add -A'
alias gap='git add --patch'
alias gc='git commit -v'
alias gca='git commit -v -a'
alias amend='git commit -v --amend'
alias fixup='git commit --amend -C HEAD'
alias gba='git branch -a'
alias merged='git branch --contains HEAD | grep $(default-branch)'
alias contains="git branch --contains"
alias unmerged='git branch --no-merged $(default-branch)'
alias applying='git show $(cat .git/rebase-merge/stopped-sha)'
alias gco='git checkout'
alias grm='git rm'
alias gmv='git mv'
alias m='git checkout $(default-branch)'
alias clean='git clean -df'
alias copyhead='git rev-parse HEAD | pbcopy'
alias stash='git stash'
alias unstash='git stash pop'
alias fetch='git fetch --no-tags'
alias grc='git rebase --continue'
alias gsp="git commit -m 'updating subproject'"
alias gps="git pull --no-tags --recurse-submodules && git submodule update --init --recursive"
alias git-unadd="git rm --cached"
alias gpick="git cherry-pick"
alias hard="git reset --hard"
alias soft="git reset"
alias current_branch="git symbolic-ref HEAD 2>/dev/null | cut -c12-"

function gbr() {
  # list the previously checked out branches
  local go_to=$1
  local n=0
  git for-each-ref --count=$(( $(tput lines) - 1 )) --sort=-committerdate refs/heads/ --format='%(refname)' | \
    cut -d / -f 3- | \
    while read branch; do
      n=$(( $n + 1 ))
      if [[ -n $go_to ]]; then
        # Go-to mode
        if [[ $n -eq $go_to ]]; then
          git checkout $branch
          return
        fi
      else
        # print mode
        echo "$n $branch"
      fi
    done
}

function gb() {
  # 'git back' command allows you to navigate to a previously checked out
  # branch
  gbr
  echo -n "Type a branch number to go to or [q]uit: " 
  read branch_number
  if [[ "$branch_number" == "q" ]]; then
    return
  fi
  gbr $branch_number
}

b() {
  local branch=$(echo $* | tr 'A-Z ' 'a-z-')
  git checkout -b jackdanger/${branch}
}

bb() {
  b $@
  git commit -a -m "$*"
  pr
}

pr() {
  local title="$@"
  local base=$(git merge-base HEAD origin/$(default-branch))
  local msg
  local gitlog_format
  local commitcount=$(git log ${base}..HEAD --oneline | wc -l)
  if [[ $commitcount -gt 1 ]]; then
    if [[ -z $title ]]; then
      # The subject line of the first commit in the branch
      title=$(git log $(git log ${base}..HEAD --format="%h" | tail -n 1) --format="%s" | HEAD -n 1)
    fi
    msg=$(git log ${base}..HEAD --reverse --format="%h
%s
%b")
  else
    msg=$(git log ${base}..HEAD --reverse --format="%s

%b")
  fi

  if [[ -n $title ]]; then
    msg="$title

$msg"
  fi

  COMMIT_MSG_FILE=COMMIT.tmp
  echo $msg > $COMMIT_MSG_FILE

  if edit_and_confirm $COMMIT_MSG_FILE; then
    echo "Creating pull request"
  else
    echo "bailing"
    rm -f $COMMIT_MSG_FILE
    return
  fi

  publish
  pr_url=$(hub pull-request -F $COMMIT_MSG_FILE)
  rm -f $COMMIT_MSG_FILE
  if [[ -n $pr_url ]]; then
    open $pr_url
  fi
}

function edit_and_confirm() {
  local text_file=$1

  cat $text_file
  echo "Look good? [y]es or [e]dit or [q]uit:" 
  read confirm

  if [[ $confirm == "e" ]]; then
    $VISUAL COMMIT.tmp
    edit_and_confirm $text_file
    return $?
  elif [[ $confirm == "y" ]]; then
    return 0
  elif [[ $confirm == "q" ]]; then
    return 1
  fi
}

# Remove local branches where the HEAD has been merged to $(default-branch)
prune_local_branches() {
  git branch | while read branch; do
  if [[ $branch == "$(default-branch)" ]]; then
      echo "not deleting master"
    elif [[ $branch =~ "\* " ]]; then
      # This is the current branch
      echo "not deleting current branch '${branch}'"
    elif [[ -n $(git branch --contains $(git rev-parse ${branch}) | egrep "^[\* ] $(default-branch)$") ]]; then
      echo "removing $branch because it's on master"
      git branch -D $branch
    else
      echo "keeping $branch"
    fi
  done
}

wip() {
  git add .
  git commit -n -m wip
}

unwip() {
  msg=$(git show HEAD | head -n 5 | tail -n 1)
  if [[ $msg == "    wip" ]]; then
    git reset HEAD^
  else
    echo "HEAD is not a WIP commit"
  fi
}

rebase() {
  git rebase ${1:-origin/$(default-branch)} ${@:2}
}
ibase() {
  git rebase -i ${1:-origin/$(default-branch)} ${@:2}
}

sha() {
  git rev-parse ${1-HEAD}
}

default-branch() {
  git symbolic-ref refs/remotes/origin/HEAD | xargs basename
}


# Clones the repo from the provided URI and then cds into it
clone() {
  local source=$1
  local dest=$2

  if [[ -z $dest ]]; then
    dest=$(basename $1 | sed s/\.git$//)
  fi

  hub clone --recursive $source $dest
  cd $dest
}

# Start a new remote branch and track it
publish() {
  if git remote | grep JackDanger; then
    command git push -u JackDanger HEAD
  else
    command git push -u origin HEAD
  fi
}

auto-fixup() {
set -x
  staged_files=$(git diff --name-only)
  echo "staged files are: ${staged_files}"
  for file in $staged_files; do
    sha_to_fixup=$(git log -n1 --format=%h ${file})
    # assert sha has not been merged
    if git branch --contains ${sha_to_fixup} | egrep " +$(default-branch) +"; then
      1>&2 echo "no commit to fixup in this topic branch"
      return 1
    fi
    echo $sha_to_fixup
    git commit --fixup ${sha_to_fixup}
    git stash
    git rebase -i --autosquash ${sha_to_fixup}^
    git stash pop
  done
}

# Get the sha from which you divert from a specific other sha:
#
#   merge-base origin/green
#
# Or just compare to master:
#
#   merge-base
#
merge-base() {
  command git merge-base ${1:-$(default-branch)} HEAD
}
# stolen from: http://stackoverflow.com/questions/342969/how-do-i-get-bash-completion-to-work-with-aliases
if [[ -z $ZSH ]]; then
  function make-completion-wrapper () {
      local function_name="$2"
      local arg_count=$(($#-3))
      local comp_function_name="$1"
      shift 2
      local function="
  function $function_name {
      ((COMP_CWORD+=$arg_count))
      COMP_WORDS=( "$@" \${COMP_WORDS[@]:1} )
      "$comp_function_name"
      return 0
  }"
      eval "$function"
  }

  # we create a _git_checkout_mine function that will do the completion for "gco"
  # using the completion function "_git"
  make-completion-wrapper _git _git_checkout_mine git checkout

  # we tell bash to actually use _git_checkout_mine to complete "gco"
  complete -o bashdefault -o default -o nospace -F _git_checkout_mine gco
  complete -o bashdefault -o default -o nospace -F _git_checkout_mine gl
  complete -o bashdefault -o default -o nospace -F _git_checkout_mine glp
  complete -o bashdefault -o default -o nospace -F _git_checkout_mine sha
fi;
